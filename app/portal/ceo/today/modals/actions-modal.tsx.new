"use client"

import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { 
  ArrowLeft, 
  CheckCircle, 
  Users, 
  Star, 
  Share, 
  MoreHorizontal, 
  FileText, 
  Download 
} from "lucide-react"
import { BsBuildings } from "react-icons/bs"
import { GoInfo } from "react-icons/go"
import { X } from "lucide-react"
import { useState } from "react"
import { useIsMobile } from "@/hooks/use-mobile"
import { actionsData } from "../data/actions-data"

interface Action {
  id: string
  title: string
  description: string
  type: 'approval' | 'vote'
  timestamp: string
  iconColor: string
  iconBg: string
  hoverBg: string
  priority?: string
  status?: string
}

interface ActionsModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  selectedActionId?: string | null
}

export function ActionsModal({ open, onOpenChange, selectedActionId }: ActionsModalProps) {
  const [selectedActionForDetails, setSelectedActionForDetails] = useState<string | null>(selectedActionId || null)
  const [actionActiveTab, setActionActiveTab] = useState("overview")
  const [comment, setComment] = useState("")
  const isMobile = useIsMobile()
  
  const handleActionDecision = (decision: string, actionId: string) => {
    console.log(`${decision} action ${actionId} with comment: ${comment}`)
    setSelectedActionForDetails(null)
    setComment("")
    onOpenChange(false)
  }

  if (!open) return null
  
  // If we have a selected action, show the action details
  if (selectedActionForDetails) {
    const action = actionsData.find(a => a.id === selectedActionForDetails)
    if (!action) return null
    
    return (
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="w-[95vw] max-w-4xl h-[95vh] max-h-[90vh] p-0 [&>button]:hidden flex flex-col">
          <div className="flex flex-col h-full">
            {/* Header */}
            <div className="p-4 sm:p-6 flex-shrink-0 bg-gray-50 border-b">
              <div className="flex items-center gap-2 sm:gap-3">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => setSelectedActionForDetails(null)}
                  className="shrink-0 h-8 w-8 sm:h-10 sm:w-10"
                >
                  <ArrowLeft className="h-4 w-4" />
                </Button>
                <div className="flex items-center gap-3">
                  <div className={`w-10 h-10 ${action.iconBg} rounded-lg flex items-center justify-center`}>
                    <FileText className={`h-5 w-5 ${action.iconColor}`} />
                  </div>
                  <div>
                    <h2 className="text-xl font-semibold text-gray-900">{action.title}</h2>
                    <p className="text-sm text-gray-500">{action.timestamp}</p>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Tabs */}
            <div className="border-b border-gray-200">
              <div className="flex overflow-x-auto">
                <button
                  onClick={() => setActionActiveTab("overview")}
                  className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${
                    actionActiveTab === "overview"
                      ? "text-blue-600 border-blue-600"
                      : "text-gray-500 border-transparent hover:text-gray-700 hover:border-gray-300"
                  }`}
                >
                  Overview
                </button>
                <button
                  onClick={() => setActionActiveTab("documents")}
                  className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${
                    actionActiveTab === "documents"
                      ? "text-blue-600 border-blue-600"
                      : "text-gray-500 border-transparent hover:text-gray-700 hover:border-gray-300"
                  }`}
                >
                  Documents
                </button>
                <button
                  onClick={() => setActionActiveTab("stakeholders")}
                  className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${
                    actionActiveTab === "stakeholders"
                      ? "text-blue-600 border-blue-600"
                      : "text-gray-500 border-transparent hover:text-gray-700 hover:border-gray-300"
                  }`}
                >
                  Stakeholders
                </button>
              </div>
            </div>
            
            {/* Content */}
            <div className="flex-1 overflow-y-auto p-6">
              {actionActiveTab === "overview" && (
                <div className="space-y-6">
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-2">Details</h3>
                    <p className="text-gray-700">{action.details || action.description}</p>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-2">Requested By</h3>
                    <p className="text-gray-700">{action.requestedBy || 'KSB Management'}</p>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-2">Deadline</h3>
                    <p className={`text-gray-700 ${
                      action.priority === 'high' ? 'text-red-600 font-medium' : ''
                    }`}>{action.deadline || 'As soon as possible'}</p>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-2">Required Action</h3>
                    <p className="text-gray-700">{action.requiredAction || 'Review and approve or reject the request'}</p>
                  </div>
                  
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-2">Your Comment</h3>
                    <Textarea
                      placeholder="Add your comment or justification for your decision here..."
                      value={comment}
                      onChange={(e) => setComment(e.target.value)}
                      className="min-h-[100px]"
                    />
                  </div>
                </div>
              )}
              
              {actionActiveTab === "documents" && (
                <div className="space-y-4">
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Related Documents</h3>
                  <div className="space-y-3">
                    {action.relatedDocuments && action.relatedDocuments.length > 0 ? (
                      action.relatedDocuments.map((doc, index) => (
                        <div key={index} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className="bg-blue-50 p-2 rounded-lg">
                              <FileText className="h-5 w-5 text-blue-500" />
                            </div>
                            <div>
                              <h4 className="text-sm font-medium text-gray-900">{doc}</h4>
                              <p className="text-xs text-gray-500">PDF â€¢ {Math.floor(Math.random() * 5) + 1} MB</p>
                            </div>
                          </div>
                          <Button variant="ghost" size="sm">
                            <Download className="h-4 w-4 mr-1" />
                            Download
                          </Button>
                        </div>
                      ))
                    ) : (
                      <p className="text-gray-500 italic">No documents attached</p>
                    )}
                  </div>
                </div>
              )}
              
              {actionActiveTab === "stakeholders" && (
                <div className="space-y-4">
                  <h3 className="text-sm font-medium text-gray-900 mb-2">Involved Stakeholders</h3>
                  <div className="space-y-3">
                    {action.stakeholders && action.stakeholders.length > 0 ? (
                      action.stakeholders.map((stakeholder, index) => (
                        <div key={index} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className="bg-green-50 p-2 rounded-lg">
                              <BsBuildings className="h-5 w-5 text-green-500" />
                            </div>
                            <div>
                              <h4 className="text-sm font-medium text-gray-900">{stakeholder}</h4>
                              <p className="text-xs text-gray-500">External Organization</p>
                            </div>
                          </div>
                          <Button variant="ghost" size="sm">
                            <Users className="h-4 w-4 mr-1" />
                            View Profile
                          </Button>
                        </div>
                      ))
                    ) : (
                      <p className="text-gray-500 italic">No specific stakeholders listed</p>
                    )}
                  </div>
                </div>
              )}
            </div>
            
            {/* Footer */}
            <div className="p-6 border-t bg-gray-50 flex flex-wrap sm:flex-nowrap gap-3 justify-between items-center">
              <div className="flex gap-3">
                <Button 
                  variant="outline"
                  onClick={() => {
                    console.log('Forward action', action.id)
                  }}
                >
                  <Share className="h-4 w-4 mr-2" />
                  Forward
                </Button>
                <Button variant="outline">
                  <Star className="h-4 w-4 mr-2" />
                  Save
                </Button>
              </div>
              <div className="flex gap-3">
                <Button 
                  variant="outline" 
                  className="border-red-200 text-red-600 hover:bg-red-50"
                  onClick={() => handleActionDecision('reject', action.id)}
                >
                  Reject
                </Button>
                <Button 
                  className="bg-green-600 hover:bg-green-700 text-white"
                  onClick={() => handleActionDecision('approve', action.id)}
                >
                  <CheckCircle className="h-4 w-4 mr-2" />
                  Approve
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    )
  }
  
  // Otherwise, show the list of actions
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="w-[95vw] max-w-4xl h-[95vh] max-h-[90vh] p-0 [&>button]:hidden flex flex-col">
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="p-4 sm:p-6 flex-shrink-0 bg-gray-50 border-b">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-xl font-semibold text-gray-900">Action Items</h2>
                <p className="text-sm text-gray-500 mt-1">{actionsData.length} actions requiring attention</p>
              </div>
              <div className="flex items-center gap-2">
                <div className="group relative">
                  <GoInfo className="h-5 w-5 text-gray-400 cursor-help" />
                  <div className="absolute right-0 top-6 bg-black text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-50">
                    Items requiring executive decision
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => onOpenChange(false)}
                  className="shrink-0 h-8 w-8"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
          
          {/* Content */}
          <div className="flex-1 overflow-y-auto p-4 sm:p-6 pt-4">
            <div className="space-y-3">
              {actionsData.map((action) => (
                <div 
                  key={action.id} 
                  className={`flex items-start gap-3 p-3 rounded-lg cursor-pointer transition-all duration-200 ${action.hoverBg} hover:shadow-md`}
                  onClick={() => setSelectedActionForDetails(action.id)}
                >
                  <div className={`w-8 h-8 ${action.iconBg} rounded-lg flex items-center justify-center flex-shrink-0`}>
                    <FileText className={`h-4 w-4 ${action.iconColor}`} />
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="text-sm font-medium text-[#202020] truncate">{action.title}</h4>
                      <div className={`px-2 py-0.5 rounded-full text-xs font-medium border backdrop-blur-sm ${
                        action.priority === 'high' ? 'bg-red-50/80 text-red-700 border-red-100' :
                        action.priority === 'medium' ? 'bg-orange-50/80 text-orange-700 border-orange-100' :
                        'bg-blue-50/80 text-blue-700 border-blue-100'
                      }`}>
                        {action.priority === 'high' ? 'High Priority' : 
                         action.priority === 'medium' ? 'Medium' : 
                         'Standard'}
                      </div>
                    </div>
                    <p className="text-xs text-[#6B6B6B] mb-1">{action.description}</p>
                    <p className="text-xs text-[#9CA3AF]">{action.timestamp}</p>
                  </div>
                  <div className="flex-shrink-0">
                    <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                      <MoreHorizontal className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}