"use client"

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Separator } from "@/components/ui/separator"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { 
  ArrowRight, 
  BookOpen, 
  Calendar, 
  ChevronDown,
  ExternalLink, 
  RefreshCw, 
  Share, 
  X,
  Bookmark,
  ArrowLeft
} from "lucide-react"
import { useState } from "react"
import { FaRegNewspaper } from "react-icons/fa"
import { MdAnalytics, MdOutlineArticle } from "react-icons/md"
import { HiOutlineGlobe } from "react-icons/hi"
import { TbBuildingFactory } from "react-icons/tb"
import { BsGraphUpArrow } from "react-icons/bs"
import { industryNewsData } from "../data/industry-news-data"

interface IndustryNewsModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
}

export function IndustryNewsModal({ open, onOpenChange }: IndustryNewsModalProps) {
  const [activeTab, setActiveTab] = useState("all")
  const [selectedArticle, setSelectedArticle] = useState<typeof industryNewsData[0] | null>(null)
  const [loading, setLoading] = useState(false)
  
  // Format date for display
  const formatDate = (dateString: string) => {
    if (dateString === 'Today') return 'Today';
    if (dateString === 'Yesterday') return 'Yesterday';
    
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en-US', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric' 
    }).format(date);
  }
  
  // Get appropriate icon for each category
  const getCategoryIcon = (category: string) => {
    switch (category.toLowerCase()) {
      case 'market':
        return <BsGraphUpArrow className="h-4 w-4" />;
      case 'policy':
        return <BookOpen className="h-4 w-4" />;
      case 'technology':
        return <MdAnalytics className="h-4 w-4" />;
      case 'international':
        return <HiOutlineGlobe className="h-4 w-4" />;
      case 'industry':
        return <TbBuildingFactory className="h-4 w-4" />;
      default:
        return <FaRegNewspaper className="h-4 w-4" />;
    }
  }

  // Group news by category
  const groupedNews = industryNewsData.reduce((acc, article) => {
    const category = article.category;
    if (!acc[category]) {
      acc[category] = {
        name: category,
        articles: []
      };
    }
    acc[category].articles.push(article);
    return acc;
  }, {} as Record<string, { name: string; articles: typeof industryNewsData }>);

  // Convert to array for mapping
  const categories = Object.values(groupedNews);
  
  // Filter articles based on active tab
  const filteredArticles = activeTab === "all" 
    ? industryNewsData 
    : industryNewsData.filter(article => article.category.toLowerCase() === activeTab.toLowerCase());
  
  // Handle article click
  const handleArticleClick = (article: typeof industryNewsData[0]) => {
    setSelectedArticle(article);
  }
  
  // Handle back to list
  const handleBackToList = () => {
    setSelectedArticle(null);
  }
  
  // Handle refresh
  const handleRefresh = () => {
    setLoading(true);
    // Simulate loading
    setTimeout(() => {
      setLoading(false);
    }, 1000);
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl h-[90vh] p-0 [&>button]:hidden">
        <div className="flex flex-col h-full">
          {selectedArticle ? (
            // Article detail view
            <>
              <div className="p-4 border-b bg-gray-50 flex items-center justify-between">
                <Button 
                  variant="ghost" 
                  className="flex items-center gap-1 text-gray-600"
                  onClick={handleBackToList}
                >
                  <ArrowLeft className="h-4 w-4" />
                  <span>Back to all news</span>
                </Button>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => onOpenChange(false)}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
              <div className="flex-1 overflow-y-auto">
                <div className="p-6">
                  <div className="mb-6">
                    <div className="flex items-center gap-2 mb-2">
                      <Badge className={selectedArticle.categoryColor}>
                        {selectedArticle.category}
                      </Badge>
                      <span className="text-gray-500 text-sm">
                        {formatDate(selectedArticle.date)} â€¢ {selectedArticle.source}
                      </span>
                    </div>
                    <h1 className="text-2xl font-semibold mb-4">{selectedArticle.title}</h1>
                    
                    {selectedArticle.imageUrl && (
                      <div className="mb-6 rounded-lg overflow-hidden">
                        <img 
                          src={selectedArticle.imageUrl} 
                          alt={selectedArticle.title} 
                          className="w-full h-64 object-cover"
                        />
                      </div>
                    )}
                    
                    <div className="prose max-w-none">
                      <p className="text-gray-700 whitespace-pre-line">{selectedArticle.content || selectedArticle.summary}</p>
                    </div>
                  </div>
                  
                  {selectedArticle.relevance && (
                    <Card className="mb-6">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-base">Relevance Analysis</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="flex flex-col sm:flex-row gap-4">
                          <div className="flex-1">
                            <h4 className="text-sm font-medium mb-1">Relevance to KSB</h4>
                            <div className="flex items-center gap-2">
                              <div className={`px-2 py-1 rounded text-xs font-medium ${
                                selectedArticle.relevance === 'High' ? 'bg-red-50 text-red-700' :
                                selectedArticle.relevance === 'Medium' ? 'bg-orange-50 text-orange-700' :
                                'bg-yellow-50 text-yellow-700'
                              }`}>
                                {selectedArticle.relevance}
                              </div>
                              <p className="text-xs text-gray-500">Priority attention recommended</p>
                            </div>
                          </div>
                          <div className="flex-1">
                            <h4 className="text-sm font-medium mb-1">Potential Impact</h4>
                            <div className="flex items-center gap-2">
                              <div className={`px-2 py-1 rounded text-xs font-medium ${
                                selectedArticle.impact === 'Significant' ? 'bg-red-50 text-red-700' :
                                selectedArticle.impact === 'Moderate' ? 'bg-orange-50 text-orange-700' :
                                'bg-blue-50 text-blue-700'
                              }`}>
                                {selectedArticle.impact}
                              </div>
                              <p className="text-xs text-gray-500">Market & policy implications</p>
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  )}
                  
                  {selectedArticle.relatedArticles && selectedArticle.relatedArticles.length > 0 && (
                    <div>
                      <h3 className="text-lg font-medium mb-3">Related Articles</h3>
                      <div className="space-y-3">
                        {selectedArticle.relatedArticles.map((article, index) => (
                          <div 
                            key={index} 
                            className="p-3 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer"
                            onClick={() => window.open(article.url, '_blank')}
                          >
                            <div className="flex items-start justify-between">
                              <div className="flex items-start gap-3">
                                <div className="bg-gray-100 p-2 rounded flex-shrink-0">
                                  <MdOutlineArticle className="h-4 w-4 text-gray-600" />
                                </div>
                                <div>
                                  <h4 className="text-sm font-medium">{article.title}</h4>
                                  <p className="text-xs text-gray-500">External Article</p>
                                </div>
                              </div>
                              <ExternalLink className="h-4 w-4 text-gray-400 flex-shrink-0" />
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </>
          ) : (
            // News list view
            <>
              <div className="p-4 border-b bg-gray-50">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h2 className="text-xl font-semibold">Industry News</h2>
                    <p className="text-sm text-gray-500">Latest updates from the sugar industry</p>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => onOpenChange(false)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
                
                <div className="border-b">
                  <div className="flex overflow-x-auto">
                    <button
                      onClick={() => setActiveTab("all")}
                      className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${
                        activeTab === "all"
                          ? "text-blue-600 border-blue-600"
                          : "text-gray-500 border-transparent hover:text-gray-700 hover:border-gray-300"
                      }`}
                    >
                      All News
                    </button>
                    {categories.map((category) => (
                      <button
                        key={category.name}
                        onClick={() => setActiveTab(category.name.toLowerCase())}
                        className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${
                          activeTab === category.name.toLowerCase()
                            ? "text-blue-600 border-blue-600"
                            : "text-gray-500 border-transparent hover:text-gray-700 hover:border-gray-300"
                        }`}
                      >
                        {category.name}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
              
              <div className="flex-1 overflow-y-auto p-4">
                <div className="flex justify-between items-center mb-4">
                  <p className="text-sm text-gray-500">{filteredArticles.length} articles</p>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="flex items-center gap-1"
                    onClick={handleRefresh}
                    disabled={loading}
                  >
                    <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
                    <span>Refresh</span>
                  </Button>
                </div>
                
                <div className="space-y-4">
                  {filteredArticles.map((article) => (
                    <div 
                      key={article.id}
                      onClick={() => handleArticleClick(article)}
                      className="border rounded-lg p-4 cursor-pointer hover:bg-gray-50 transition-colors"
                    >
                      <div className="flex items-start gap-4">
                        <div className={`rounded p-2 flex-shrink-0 ${article.categoryColor}`}>
                          {getCategoryIcon(article.category)}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <Badge className={article.categoryColor} variant="outline">
                              {article.category}
                            </Badge>
                            <span className="text-xs text-gray-500">
                              {article.source} â€¢ {formatDate(article.date)}
                            </span>
                          </div>
                          <h3 className="font-medium text-gray-900 mb-1">{article.title}</h3>
                          <p className="text-sm text-gray-600 line-clamp-2">{article.summary}</p>
                          <div className="flex items-center mt-2">
                            <Button variant="ghost" size="sm" className="text-xs text-blue-600 p-0 h-auto hover:bg-transparent hover:underline">
                              Read more
                              <ArrowRight className="h-3 w-3 ml-1" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}